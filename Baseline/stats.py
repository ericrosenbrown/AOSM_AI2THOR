from viz_room import viz_room
from viz_room import viz_object_action_poses
from ai2thor.controller import Controller
from collections import defaultdict
import pickle
import numpy as np

import matplotlib.pyplot as plt
from statistics import mean, pstdev

def dd():
	return defaultdict(list)

def num_actions_per_room():
	total_actions = []
	for i in range(1,30):
		'''
		##### INITIALIZE CONTROLLERs
		controller = Controller(scene="FloorPlan"+str(i), gridSize=0.25,width=500,height=500)

		##### GET MAP
		event = controller.step(action='GetReachablePositions')
		room = event.metadata['actionReturn']
		'''
		floor_plan_i = pickle.load(open("action_maps/FloorPlan"+str(i)+"_amap_room.p","rb"))

		room = floor_plan_i["room"]

		num_free_spaces = len(room)
		num_orientations = 4
		num_manip_actions = 6
		total = num_free_spaces*num_orientations*num_manip_actions

		total_actions.append(total)

	plt.hist(total_actions,bins=10)
	plt.show()

def bargraph_room_steps():
	#AOSM = {1: [27, 21, 27, 33, 35, 27, 20, 20, 38, 36, 20, 20, 27, 38, 29, 20, 20, 37, 41, 20], 2: [42, 46, 40, 49, 58, 41, 37, 46, 46, 37, 55, 37, 38, 53, 42, 57, 53, 45, 48, 52], 3: [39, 38, 39, 39, 39, 40, 39, 39, 37, 37, 38], 4: [], 5: [21, 28, 21, 21, 25, 27, 31, 24, 31, 37, 25, 25], 6: [33, 33, 48, 32, 45, 46, 32, 32, 43, 46, 31, 45, 33, 43, 33, 33, 41, 42, 40, 43], 7: [47, 47, 45, 46, 45, 46, 34, 45, 31, 46, 45, 47, 31, 51, 46, 47, 47, 46, 33, 50], 8: [29, 41, 31, 31, 42, 45, 40, 43, 29, 46, 29, 40], 9: [27, 27, 27, 33, 31, 30, 33, 26, 28, 27, 28, 24, 26, 26, 28, 30, 29, 31, 25, 28], 10: [26, 47, 26, 20, 27, 20, 52, 22, 44, 44, 41, 56, 28, 20, 20, 42, 23, 20, 19, 46], 11: [27, 25, 33, 36, 28, 23, 29, 21, 30, 34, 24, 23, 28, 23, 26, 31, 21, 23, 32, 25], 12: [26, 27, 26, 23, 35, 24, 27, 26, 25, 33, 28, 35, 32, 27, 29, 31, 26, 34, 34, 34], 13: [38, 58, 49, 55, 53, 35, 36, 34, 49, 35, 50, 35, 35, 34, 54, 38, 54, 53, 55, 52], 14: [27, 23, 30, 30, 28, 25, 25, 25, 23, 23, 24, 30], 15: [45, 46, 38, 48, 34, 53, 48, 32, 48, 36, 36, 34, 51, 36, 48, 46, 44, 48], 16: [], 17: [37, 34, 32, 32, 33, 37], 18: [46, 46, 65, 65, 28, 69, 45, 47, 25, 44, 51, 65, 65, 66, 66, 52, 46], 19: [33, 42, 29, 37, 42, 33, 34, 39, 38, 38, 21, 38, 44, 38, 37, 31], 20: [26, 17, 31, 30, 28, 27, 26, 24, 17, 17, 28, 17, 30, 24, 21, 28, 17, 17, 24, 31], 21: [], 22: [28, 31, 26, 34, 34, 28, 33, 23, 28, 32, 35, 28, 29, 26, 32, 32, 28], 23: [29, 31, 32, 30, 32, 30, 31, 30, 30], 24: [31, 27, 30, 30, 27, 34, 29, 32, 26, 32, 33, 32, 28, 33, 26, 32, 27], 25: [21, 19, 19, 19, 19, 19, 19, 20, 19, 19, 19, 19, 19, 20, 19, 19, 19, 19], 26: [29, 32, 28, 27, 28, 30, 26, 35, 28, 23, 34, 28, 33, 23, 26, 34, 25, 26, 23, 29], 27: [24, 28, 27, 26, 28, 27, 28, 31, 29, 27, 26, 29, 29, 28, 26, 28, 28, 26, 27, 30], 28: [47, 47, 51, 46, 47, 49, 47, 41, 44], 29: [], 30: [21, 31, 34, 33, 21, 32, 21, 22, 32, 32, 20, 23, 33, 18, 20, 23, 18, 35, 22, 23]}
	AOSM = {1: [30, 19, 22, 21, 22, 24, 20, 20, 17, 30, 29, 27], 2: [30, 29, 30, 29, 30, 39, 30, 28, 29, 31, 30, 30], 3: [33, 29, 31, 38, 33, 31, 31, 30, 30, 36, 34, 33, 35, 34, 31, 40, 31], 4: [20, 21, 19, 28, 19, 21, 20, 27, 22, 20, 24, 30, 19, 19], 5: [21, 23, 21, 22, 19, 19, 20, 21, 19, 20, 19, 19, 20], 6: [26, 25, 23, 37, 29, 26, 37, 40, 24, 32, 27, 40, 40, 27, 32, 29, 28], 7: [31, 30, 29, 25, 42, 32, 23, 27, 32, 37, 33, 27, 51, 31, 31], 8: [22, 26, 28, 32, 18, 24, 33, 25, 23, 34, 25, 28], 9: [20, 20, 25, 28, 21, 19, 21, 29, 23, 19, 21, 24, 21], 10: [18, 18, 18, 18, 19], 11: [17, 24, 34, 20, 20, 20, 29, 24, 28, 28], 12: [21, 22, 21], 13: [31, 36, 30, 42, 22, 30, 37, 24], 14: [20, 21, 21, 21, 19, 20, 20, 20], 15: [24, 21, 33, 24], 16: [40, 45, 42, 32, 28, 40, 36, 46, 36, 44, 50, 35, 45, 53, 27], 17: [36, 26, 20, 20, 26, 19, 30, 18, 20, 20], 18: [62, 61, 52, 33, 49, 68, 58, 42, 31], 19: [21, 23, 22, 30], 20: [17, 20, 21, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 18], 21: [27, 28, 25, 33, 25, 28, 26, 47, 26, 29], 22: [25, 20, 24, 24, 26, 19, 24], 23: [27, 27, 28, 28, 27], 24: [20, 24, 19, 22, 26, 19, 20, 29, 28], 25: [18, 18, 18, 18, 18, 19, 18, 18, 18, 19, 20, 18, 19, 18, 18, 18, 20, 21, 18], 26: [20, 24, 20, 21, 21, 23, 22], 27: [17, 17, 17, 17, 17, 17, 17], 28: [23, 35, 42, 26, 25, 39, 38, 30, 40, 40], 29: [20, 21, 21, 23, 20, 25, 21, 19, 21, 21, 20, 21, 21, 19, 21, 21, 20], 30: [30, 18, 18, 17, 22, 17, 19, 19, 39, 18, 27, 18, 19]}
	#AOSM = {1: [20, 21, 31, 28, 32, 20, 27, 33, 23, 24], 2: [29, 24, 30, 29, 31, 26, 30, 31, 25, 30, 25, 28], 3: [30, 32, 31, 39, 29, 31, 30, 30, 31, 32, 33, 33, 31], 4: [20, 19, 23, 19, 26, 22, 26, 21, 19, 20, 20, 24, 28, 19, 20], 5: [28, 22, 19, 19, 24, 20, 20, 19, 22], 6: [26, 27, 36, 44, 35, 25, 26, 25, 26, 25, 33, 38, 40, 25, 27, 28, 28], 7: [26, 49, 30, 27, 31, 26, 32, 26, 25, 31, 29, 24, 25, 44, 28, 32, 42], 8: [21, 26, 23, 26, 27, 24, 32, 28], 9: [21, 24, 20, 30, 23, 24, 19, 20, 24, 20], 10: [18, 18, 18, 18, 18, 18, 18], 11: [27, 19, 26, 28, 31, 34, 39, 19, 18, 25, 28, 19, 26], 12: [22, 21, 22, 22, 23, 23, 22], 13: [28, 23, 22, 33, 26, 33, 32, 33, 42, 25, 34, 27, 40], 14: [20, 20, 23, 22], 15: [25, 19, 22, 28, 26], 16: [42, 27, 37, 49, 27, 40, 37, 39, 49, 42, 41, 33, 46, 42, 50, 38], 17: [31, 24, 19, 23, 27, 24, 28, 25, 20, 23, 21], 18: [64, 31, 47, 43, 34, 55], 19: [21, 38], 20: [20, 24, 18, 17, 17, 25, 17, 17, 17, 17, 17, 18, 17, 19], 21: [25, 29, 29, 33, 32, 26, 29, 37, 28, 24], 22: [29, 22, 25, 18, 27], 23: [30, 29, 28, 29, 29], 24: [20, 19, 28, 24, 31], 25: [18, 18, 18, 19, 18, 18, 18, 18, 18, 19, 18, 19, 20, 18, 19, 18, 18, 18, 20], 26: [21, 19, 22, 21, 20, 21, 23, 20, 21, 27, 21, 21, 23], 27: [19, 18, 17, 17, 17, 17, 17, 17, 17, 17, 18], 28: [29, 37, 37, 35, 26, 24, 33, 31, 32, 34, 41, 31, 41, 33, 30], 29: [22, 22, 22, 21, 20, 20, 21, 21, 23, 22, 20, 20, 20, 22, 21, 20, 22], 30: [29, 18, 30, 27, 19, 20, 30, 41, 19, 17, 29, 28, 18]}


	AOSM_av = {}
	AOSM_std = {}

	AOSM_succ = {}
	for k in AOSM.keys():
		AOSM_succ[str(k)] = len(AOSM[k])/float(20)
		try:
			AOSM_av[str(k)] = mean(AOSM[k])
			AOSM_std[str(k)] = pstdev(AOSM[k])
		except:
			AOSM_av[str(k)] = 0
			AOSM_std[str(k)] = 0 

	# graph average plannign time
	courses = list(AOSM_av.keys()) 
	values = list(AOSM_av.values()) 
	stderror = list(AOSM_std.values()) 
   
	fig = plt.figure(figsize = (10, 5)) 
  
	# creating the bar plot 
	plt.bar(courses, values,yerr=stderror, color ='maroon',  
        width = 0.4) 
  
	plt.xlabel("Room #") 
	plt.ylabel("Av. # of steps") 
	plt.title("Length of trajectories (rooms randomized 20 times)") 
	plt.show() 

	# graph success rates
	courses = list(AOSM_succ.keys()) 
	values = list(AOSM_succ.values()) 
   
	fig = plt.figure(figsize = (10, 5)) 
  
	# creating the bar plot 
	plt.bar(courses, values, color ='maroon',  
        width = 0.4) 
  
	plt.xlabel("Room #") 
	plt.ylabel("Success rate") 
	plt.title("Success rate per room (rooms randomized 20 times)") 
	plt.show() 



if __name__ == "__main__":
	#num_actions_per_room()
	bargraph_room_steps()
